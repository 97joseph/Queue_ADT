/* @formatter:off * * Dave Rosenberg * Comp 2000 - Data Structures * Lab: Queue ADT * Fall, 2021 *  * Usage restrictions: *  * You may use this code for exploration, experimentation, and furthering your * learning for this course. You may not use this code for any other * assignments, in my course or elsewhere, without explicit permission, in * advance, from myself (and the instructor of any other course). *  * Further, you may not post nor otherwise share this code with anyone other than * current students in my sections of this course. Violation of these usage * restrictions will be considered a violation of the Wentworth Institute of * Technology Academic Honesty Policy. * * Do not remove this notice. * * @formatter:on */package edu.wit.scds.comp2000.queue ;/** * An interface for the ADT queue. * * @author Frank M. Carrano * @author Timothy M. Henry * @version 5.0 *  * @author David M Rosenberg * @version 5.1.0 2019-07-14 minor revisions per Dave Rosenberg Company coding *     standard and class assignment * @version 5.2.0 2020-03-01 update to coding standard *  * @param <T> *     The type of all objects to store in the queue */public interface QueueInterface<T>    {    /**     * Removes all entries from this queue.     */    public void clear() ;    /**     * Removes and returns the entry at the front of this queue.     *      * @return The object at the front of the queue.     * @throws EmptyQueueException     *     if the queue is empty before the operation.     */    public T dequeue() ;    /**     * Adds a new entry to the back of this queue.     *      * @param newEntry     *     An object to be added.     * @throws IllegalStateException     *     if the queue can't grow to accept the new entry     */    public void enqueue( T newEntry ) ;    /**     * Retrieves the entry at the front of this queue.     *      * @return The object at the front of the queue.     * @throws EmptyQueueException     *     if the queue is empty.     */    public T getFront() ;    /**     * Detects whether this queue is empty.     *      * @return True if the queue is empty, or false otherwise.     */    public boolean isEmpty() ;    }   // end interface QueueInterface